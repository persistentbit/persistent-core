package com.persistbit.core.collections;

import com.persistentbit.core.Nullable;
import com.persistentbit.core.codegen.CaseClass;
import com.persistentbit.core.codegen.GenNoLens;
import com.persistentbit.core.properties.FieldNames;

import java.util.Optional;

/**
 * User: petermuys
 * Date: 11/07/16
 * Time: 18:01
 */
@CaseClass
@GenNoLens
public class BuildTest<A> {
    private final String first;
    @Nullable
    private final String middle;
    private final String last;
    private final A a;

    @FieldNames(names = {"first", "middle", "last", "a"})
    public BuildTest(String first, String middle, String last, A a) {
        this.first = first;
        this.middle = middle;
        this.last = last;
        this.a = a;
    }



	//Generated by com.persistentbit.core.codegen.ImmutableCodeBuilder

	public BuildTest<A>	 withFirst(String value){
		return new BuildTest<>(value, this.middle, this.last, this.a);
	} 

	public String getFirst(){ return first; }

	public BuildTest<A>	 withMiddle(String value){
		return new BuildTest<>(this.first, value, this.last, this.a);
	} 

	public Optional<String> getMiddle(){ return Optional.ofNullable(middle); }

	public BuildTest<A>	 withLast(String value){
		return new BuildTest<>(this.first, this.middle, value, this.a);
	} 

	public String getLast(){ return last; }

	public BuildTest<A>	 withA(A value){
		return new BuildTest<>(this.first, this.middle, this.last, value);
	} 

	public A getA(){ return a; }

	//[[ImmutableCodeBuilder]]


	//[[ImmutableCodeBuilder]]

	@Override
	public boolean equals(Object o){
		if(o == this) { return true; }
		if(o instanceof BuildTest ==false) { return false; }
		BuildTest other = (BuildTest)o;
		if(!a.equals(other.a)){ return false; }
		if(!first.equals(other.first)){ return false; }
		if(middle == null) { if(other.middle != null) { return false; } } else { if(!middle.equals(other.middle)){ return false; } }
		return last.equals(other.last);
	}

	@Override
	public int hashCode(){
		int result=0;
		result = 31 * result + a.hashCode();
		result = 31 * result + first.hashCode();
		result = 31 * result + last.hashCode();
		return result;
	}

}